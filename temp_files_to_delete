                        # Visualization of missing data\n                        fig_missing = px.bar(\n                            missing_data, x='Column', y='Missing Percentage',\n                            title=\"Missing Data by Column\",\n                            color='Missing Percentage',\n                            color_continuous_scale='Reds'\n                        )\n                        fig_missing.update_layout(xaxis_tickangle=-45)\n                        st.plotly_chart(fig_missing, use_container_width=True)\n                    else:\n                        st.success(\"‚úÖ No missing data found in the dataset!\")\n                \n                with quality_col2:\n                    st.write(\"**Data Quality Metrics:**\")\n                    \n                    total_cells = len(combined_df) * len(combined_df.columns)\n                    missing_cells = combined_df.isnull().sum().sum()\n                    completeness = ((total_cells - missing_cells) / total_cells * 100)\n                    \n                    st.metric(\"Data Completeness\", f\"{completeness:.1f}%\")\n                    st.metric(\"Total Records\", f\"{len(combined_df):,}\")\n                    st.metric(\"Total Fields\", f\"{total_cells:,}\")\n                    st.metric(\"Missing Values\", f\"{missing_cells:,}\")\n                    \n                    # Data type distribution\n                    dtype_counts = combined_df.dtypes.value_counts().reset_index()\n                    dtype_counts.columns = ['Data Type', 'Count']\n                    \n                    st.write(\"**Data Types:**\")\n                    for dtype, count in dtype_counts.values:\n                        st.write(f\"‚Ä¢ {dtype}: {count} columns\")\n                    \n                    # Quality recommendations\n                    st.write(\"**üí° Quality Recommendations:**\")\n                    if completeness < 90:\n                        st.warning(\"‚ö†Ô∏è Consider data cleaning for missing values\")\n                    else:\n                        st.success(\"‚úÖ Good data completeness\")\n                    \n                    if len(combined_df.columns) > 20:\n                        st.info(\"‚ÑπÔ∏è Large number of columns - consider feature selection\")\n                    \n                    duplicate_rows = combined_df.duplicated().sum()\n                    if duplicate_rows > 0:\n                        st.warning(f\"‚ö†Ô∏è Found {duplicate_rows} duplicate rows\")\n                    else:\n                        st.success(\"‚úÖ No duplicate rows found\")\n        else:\n            st.warning(\"No data available for exploration. Please check your dataset files.\")\n\ndef main():\n    \"\"\"Main function to run the Biology Intelligence Dashboard\"\"\"\n    try:\n        build_ui()\n    except Exception as e:\n        st.error(f\"Application error: {e}\")\n        st.info(\"Please check your dataset files and try refreshing the page.\")\n\nif __name__ == \"__main__\":\n    main()